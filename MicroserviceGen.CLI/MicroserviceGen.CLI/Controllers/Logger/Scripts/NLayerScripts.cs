namespace MicroserviceGen.CLI.Controllers.Logger.Scripts;

public class NLayerScripts
{
    public const string NLog = "echo \"Setting up for NLog\"\n\ncd _PasteNameHere_.Web\ndotnet add package NLog\ndotnet add package NLog.Web.AspNetCore\ntouch NLog.config\necho '<?xml version=\"1.0\" encoding=\"utf-8\" ?>' > NLog.config\necho '' >> NLog.config\necho '<!--' >> NLog.config\necho '  autoReload=\"true\": Automatically reloads the config if changes occur during runtime.' >> NLog.config\necho '  internalLogLevel=\"Warn\": Set internal logging level for NLog. Logs only warnings and errors related to NLog itself.' >> NLog.config\necho '  internalLogFile=\"internal-nlog.txt\":  Log internal NLog issues to this file, useful for debugging NLog issues.' >> NLog.config\necho '  throwConfigExceptions=\"true\": Throws exceptions for Nlog config errors for easier debugging.' >> NLog.config\necho '-->' >> NLog.config\necho '' >> NLog.config\necho '<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"' >> NLog.config\necho '      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' >> NLog.config\necho '      autoReload=\"true\"' >> NLog.config\necho '      internalLogLevel=\"Warn\"' >> NLog.config\necho '      internalLogFile=\"internal-nlog.txt\"' >> NLog.config\necho '   throwConfigExceptions=\"true\">' >> NLog.config\necho '' >> NLog.config\necho ' <!-- Define various log targets where logs will be written -->' >> NLog.config\necho ' <targets>' >> NLog.config\necho '  <!--' >> NLog.config\necho '    type=\"File\": File Traget. Write logs to a text file.' >> NLog.config\necho '    name=\"file\": Name for this target. Rule section will use this name while defining rules.' >> NLog.config\necho '    fileName=\"logs-${shortdate}.log\": Path to the file where logs will be saved with date-based naming.' >> NLog.config\necho '    layout: Log format with date, level, logger (fully qualified class name), message (actual log message), and exception details if any.' >> NLog.config\necho '  -->' >> NLog.config\necho '  <target xsi:type=\"File\"' >> NLog.config\necho '    name=\"file\"' >> NLog.config\necho '    fileName=\"logs.log\"' >> NLog.config\necho '    layout=\"${longdate}|${level:uppercase=true}|${logger}|${message} ${exception:format=ToString}\" />' >> NLog.config\necho '' >> NLog.config\necho '  <!--' >> NLog.config\necho '    type=\"Console: Console target. Display logs in the console window.' >> NLog.config\necho '    name=\"console\": Name for this target. Rule section will use this name while defining rules.' >> NLog.config\necho '    layout: Format similar to file target. If you want you can give a different format' >> NLog.config\necho '  -->' >> NLog.config\necho '  <target xsi:type=\"Console\"' >> NLog.config\necho '    name=\"console\"' >> NLog.config\necho '    layout=\"${longdate}|${level:uppercase=true}|${logger}|${message} ${exception:format=ToString}\" />' >> NLog.config\necho '' >> NLog.config\necho '  <!--' >> NLog.config\necho '    type=\"Null\": Null target. Discard logs, used to filter out logs from specific namespaces.' >> NLog.config\necho '    name=\"blackhole\": Any logs sent to this target will be ignored or discarded.' >> NLog.config\necho '  -->' >> NLog.config\necho '  <target xsi:type=\"Null\" name=\"blackhole\" />' >> NLog.config\necho ' </targets>' >> NLog.config\necho '' >> NLog.config\necho ' <!-- Define logging rules to control which logs go to which targets. Define Rules for Each Target -->' >> NLog.config\necho ' <rules>' >> NLog.config\necho '  <!--' >> NLog.config\necho '    Ignore logs from Microsoft and System namespaces by sending them to the \"blackhole\" target' >> NLog.config\necho '    name=\"Microsoft.*\": Microsoft and its related namespaces' >> NLog.config\necho '    minlevel=\"Information\": Minimum log level, capturing all logs from Information level upwards.' >> NLog.config\necho '    writeTo=\"blackhole\": Send logs to the blackhole target to ignore them' >> NLog.config\necho '    final=\"true\": Stop further processing of logs that match this rule' >> NLog.config\necho '  -->' >> NLog.config\necho '  <logger name=\"Microsoft.*\"' >> NLog.config\necho '    minlevel=\"Information\"' >> NLog.config\necho '    writeTo=\"blackhole\"' >> NLog.config\necho '    final=\"true\" />' >> NLog.config\necho '' >> NLog.config\necho '  <!-- ' >> NLog.config\necho '   Filter out logs from the \"System\" namespace by sending them to the \"blackhole\" target.' >> NLog.config\necho '   This is similar to Microsoft namespace' >> NLog.config\necho '  -->' >> NLog.config\necho '  <logger name=\"System.*\"' >> NLog.config\necho '    minlevel=\"Trace\"' >> NLog.config\necho '    writeTo=\"blackhole\"' >> NLog.config\necho '    final=\"true\" />' >> NLog.config\necho '' >> NLog.config\necho '  <!-- ' >> NLog.config\necho '   Send all logs with level Information or higher to the file target' >> NLog.config\necho '   name=\"*\": Apply this rule to all loggers or you can say all namespaces' >> NLog.config\necho '   minlevel=\"Information\": Minimum log level is Information' >> NLog.config\necho '   writeTo=\"file\": Send matching logs to the \"file\" target' >> NLog.config\necho '  -->' >> NLog.config\necho '  <logger name=\"*\"' >> NLog.config\necho '    minlevel=\"Information\"' >> NLog.config\necho '    writeTo=\"file\" />' >> NLog.config\necho '' >> NLog.config\necho '  <!-- ' >> NLog.config\necho '   Send all logs with level Debug or higher to the console target' >> NLog.config\necho '   name=\"*\": Apply this rule to all loggers or you can say all namespaces' >> NLog.config\necho '   minlevel=\"Debug\": Minimum log level is Debug' >> NLog.config\necho '   writeTo=\"console\": Send matching logs to the \"console\" target' >> NLog.config\necho '  -->' >> NLog.config\necho '  <logger name=\"*\"' >> NLog.config\necho '    minlevel=\"Information\"' >> NLog.config\necho '    writeTo=\"console\" />' >> NLog.config\necho ' </rules>' >> NLog.config\necho '</nlog>' >> NLog.config\n\nsed -i \"/var builder = WebApplication.CreateBuilder(args);/a \\\\\nbuilder.Logging.ClearProviders();\\n\\\\\nbuilder.Host.UseNLog();\" Program.cs\nsed -i '1s|^|using NLog.Web;\\n|' Program.cs\ncd ..\n";
    public const string Serilog = "echo \"Setting up for serilog\"\n\ncd _PasteNameHere_.Web\ndotnet add package Serilog.AspNetCore --version 8.0.3\ndotnet add package Serilog.Sinks.Console\ndotnet add package Serilog.Sinks.File\ndotnet add package Serilog.Settings.Configuration --version 8.0.4\ndotnet add package Serilog.Sinks.Async\n\nsed -i \"/var builder = WebApplication.CreateBuilder(args);/a \\\\\nbuilder.Logging.ClearProviders();\\n\\\\\n// Configure Serilog:\\\\\n// - Read configuration from appsettings.json using builder.Configuration.\\\\\n// - Set up logging to the console and to a file.\\\\\nLog.Logger = new LoggerConfiguration()             // Create a new Serilog logger configuration\\\\\n    .ReadFrom.Configuration(builder.Configuration) // Read settings from appsettings.json\\\\\n    .WriteTo.Console()                             // Log output to the console\\\\\n    .WriteTo.File(\\\"logs/MyAppLog.txt\\\")             // Log output to a file\\\\\n    .CreateLogger();                               // Build the logger\\\\\n// Replace the default logging provider with Serilog\\\\\nbuilder.Host.UseSerilog(); // This ensures Serilog handles all logging\" Program.cs\nsed -i '1s|^|using Serilog;\\n|' Program.cs\n\nAPPSETTINGS=\"appsettings.json\"\nAPPSETTINGS_DEV=\"appsettings.Development.json\"\n# Note the different connection string format for PostgreSQL\nNEW_CONNECTION=\"\\\"Serilog\\\": {\\\\\n    \\\"MinimumLevel\\\": \\\"Information\\\",\\\\\n    \\\"WriteTo\\\": [\\\\\n      {\\\\\n        \\\"Name\\\": \\\"Console\\\"\\\\\n      },\\\\\n      {\\\\\n        \\\"Name\\\": \\\"File\\\",\\\\\n        \\\"Args\\\": {\\\\\n          \\\"path\\\": \\\"logs/MyAppLog-.txt\\\",\\\\\n          \\\"rollingInterval\\\": \\\"Day\\\" \\\\\n        }\\\\\n      }\\\\\n    ],\\\\\n    \\\"Properties\\\": {\\\\\n      // Global properties attached to every log event\\\\\n      \\\"Application\\\": \\\"App-LoggingDemo\\\", \\\\\n      \\\"Server\\\": \\\"Server-125.08.13.1\\\" \\\\\n    }\\\\\n  },\"\nsed -i \"/^{/a $NEW_CONNECTION\" \"$APPSETTINGS\"\nsed -i \"/^{/a $NEW_CONNECTION\" \"$APPSETTINGS_DEV\"\ncd ..\n";
}
namespace MicroserviceGen.CLI.Controllers.EfCore.Scripts;

public static class NLayerScripts
{
    public const string Pgsql = "echo \"Setting up for PostgreSQL with Npgsql\"\ncd _PasteNameHere_.Web\n# Add the PostgreSQL provider package instead of SQL Server\ndotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version 8.0.2\n\n# The Tools package and project reference remain the same\ndotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.20\ndotnet add reference ../_PasteNameHere_.Infrastructure/_PasteNameHere_.Infrastructure.csproj\n\n# Update Program.cs to use the PostgreSQL provider\nsed -i '1s|^|using _PasteNameHere_.Infrastructure;\\n|' Program.cs\nsed -i '1s|^|using Microsoft.EntityFrameworkCore;\\n|' Program.cs\n\n# This is the key line: change UseSqlServer to UseNpgsql\nsed -i '/var builder = WebApplication.CreateBuilder(args);/a \\\nbuilder.Services.AddDbContext<PgsqlDbContext>(options => options.UseNpgsql(builder.Configuration[\"PgsqlConnectionStrings:DefaultConnection\"]));' Program.cs\n\n# Update appsettings.json with a PostgreSQL connection string\nAPPSETTINGS=\"appsettings.json\"\nAPPSETTINGS_DEV=\"appsettings.Development.json\"\n# Note the different connection string format for PostgreSQL\nNEW_CONNECTION=\"\\\"PgsqlConnectionStrings\\\": {\\n    \\\"DefaultConnection\\\": \\\"Host=your_host;Database=your_database;Username=your_username;Password=your_password\\\"\\n  },\"\nsed -i \"/^{/a $NEW_CONNECTION\" \"$APPSETTINGS\"\nsed -i \"/^{/a $NEW_CONNECTION\" \"$APPSETTINGS_DEV\"\ncd ../_PasteNameHere_.Infrastructure\ndotnet add package Microsoft.EntityFrameworkCore --version 8.0.20\ncd DatabaseContext\ndotnet new class -n PgsqlDbContext --project ../_PasteNameHere_.Infrastructure.csproj\nFILE=\"PgsqlDbContext.cs\"\n\nsed -i '1s|^|using Microsoft.EntityFrameworkCore;\\n|' \"$FILE\"\n\nsed -i 's|public class PgsqlDbContext|public class PgsqlDbContext : DbContext|' \"$FILE\"\n\nsed -i '/^\\s*}\\s*$/i \\\n    public PgsqlDbContext(DbContextOptions<PgsqlDbContext> options) : base(options) \\\n    { \\\n    } \\\n' \"$FILE\"\ncd ../..\n";
    public const string Sqlite = "# In your project directory (_PasteNameHere_.[DefineName1])\necho \"Setting up for SQLite\"\ncd _PasteNameHere_.Web\n# Add the SQLite provider package instead of SQL Server\ndotnet add package Microsoft.EntityFrameworkCore.Sqlite --version 8.0.20\n\n# The Tools package and project reference remain the same\ndotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.20\ndotnet add reference ../_PasteNameHere_.Infrastructure/_PasteNameHere_.Infrastructure.csproj\n\n# Update Program.cs to use the SQLite provider\nsed -i '1s|^|using _PasteNameHere_.Infrastructure;\\n|' Program.cs\nsed -i '1s|^|using Microsoft.EntityFrameworkCore;\\n|' Program.cs\n\n# This is the key line: change UseSqlServer to UseSqlite\nsed -i '/var builder = WebApplication.CreateBuilder(args);/a \\\nbuilder.Services.AddDbContext<SqliteDbContext>(options => options.UseSqlite(builder.Configuration[\"SqliteConnectionStrings:DefaultConnection\"]));' Program.cs\n\n# Update appsettings.json with a SQLite connection string\nAPPSETTINGS=\"appsettings.json\"\nAPPSETTINGS_DEV=\"appsettings.Development.json\"\n# Note the connection string points to a local file\nNEW_CONNECTION=\"\\\"SqliteConnectionStrings\\\": {\\n    \\\"DefaultConnection\\\": \\\"Data Source=LocalDatabase.db\\\"\\n  },\"\nsed -i \"/^{/a $NEW_CONNECTION\" \"$APPSETTINGS\"\nsed -i \"/^{/a $NEW_CONNECTION\" \"$APPSETTINGS_DEV\"\ncd ../_PasteNameHere_.Infrastructure\ndotnet add package Microsoft.EntityFrameworkCore --version 8.0.20\ncd DatabaseContext\ndotnet new class -n SqliteDbContext --project ../_PasteNameHere_.Infrastructure.csproj\nFILE=\"SqliteDbContext.cs\"\n\nsed -i '1s|^|using Microsoft.EntityFrameworkCore;\\n|' \"$FILE\"\n\nsed -i 's|public class SqliteDbContext|public class SqliteDbContext : DbContext|' \"$FILE\"\n\nsed -i '/^\\s*}\\s*$/i \\\n    public SqliteDbContext(DbContextOptions<SqliteDbContext> options) : base(options) \\\n    { \\\n    } \\\n' \"$FILE\"\ncd ../..\n";
    public const string Sqlserv = "echo \"Pluggable efcore\"\ncd _PasteNameHere_.Web\ndotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.20\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 8.0.20\ndotnet add reference ../_PasteNameHere_.Infrastructure/_PasteNameHere_.Infrastructure.csproj\nsed -i '1s|^|using _PasteNameHere_.Infrastructure;\\n|' Program.cs\nsed -i '1s|^|using Microsoft.EntityFrameworkCore;\\n|' Program.cs\nsed -i '/var builder = WebApplication.CreateBuilder(args);/a \\\nbuilder.Services.AddDbContext<SqlservDbContext>(options => options.UseSqlServer(builder.Configuration[\"SqlservConnectionStrings:DefaultConnection\"]));' Program.cs\nAPPSETTINGS=\"appsettings.json\"\nAPPSETTINGS_DEV=\"appsettings.Development.json\"\nNEW_CONNECTION=\"\\\"SqlservConnectionStrings\\\": {\\n    \\\"DefaultConnection\\\": \\\"Server=your_server;Database=your_database;User Id=your_username;Password=your_password;\\\"\\n  },\"\nsed -i \"/^{/a $NEW_CONNECTION\" \"$APPSETTINGS\"\nsed -i \"/^{/a $NEW_CONNECTION\" \"$APPSETTINGS_DEV\"\ncd ../_PasteNameHere_.Infrastructure\ndotnet add package Microsoft.EntityFrameworkCore --version 8.0.20\ncd DatabaseContext\ndotnet new class -n SqlservDbContext --project ../_PasteNameHere_.Infrastructure.csproj\nFILE=\"SqlservDbContext.cs\"\n\nsed -i '1s|^|using Microsoft.EntityFrameworkCore;\\n|' \"$FILE\"\n\nsed -i 's|public class SqlservDbContext|public class SqlservDbContext : DbContext|' \"$FILE\"\n\nsed -i '/^\\s*}\\s*$/i \\\n    public SqlservDbContext(DbContextOptions<SqlservDbContext> options) : base(options) \\\n    { \\\n    } \\\n' \"$FILE\"\ncd ../..\n";
}